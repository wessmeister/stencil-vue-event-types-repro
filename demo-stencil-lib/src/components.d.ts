/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ClickDetail } from "./components/demo-button/demo-button";
export { ClickDetail } from "./components/demo-button/demo-button";
export namespace Components {
    interface DemoButton {
        /**
          * @default ''
         */
        "value": string;
    }
}
export interface DemoButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDemoButtonElement;
}
declare global {
    interface HTMLDemoButtonElementEventMap {
        "demoClick": ClickDetail;
    }
    interface HTMLDemoButtonElement extends Components.DemoButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDemoButtonElementEventMap>(type: K, listener: (this: HTMLDemoButtonElement, ev: DemoButtonCustomEvent<HTMLDemoButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDemoButtonElementEventMap>(type: K, listener: (this: HTMLDemoButtonElement, ev: DemoButtonCustomEvent<HTMLDemoButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDemoButtonElement: {
        prototype: HTMLDemoButtonElement;
        new (): HTMLDemoButtonElement;
    };
    interface HTMLElementTagNameMap {
        "demo-button": HTMLDemoButtonElement;
    }
}
declare namespace LocalJSX {
    interface DemoButton {
        "onDemoClick"?: (event: DemoButtonCustomEvent<ClickDetail>) => void;
        /**
          * @default ''
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "demo-button": DemoButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "demo-button": LocalJSX.DemoButton & JSXBase.HTMLAttributes<HTMLDemoButtonElement>;
        }
    }
}
